type Game {
  id: ID!
  name: String!
  description: String
  image: String
  levels: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Gameplay {
  id: ID!
  gameid: String!
  proficiency: String!
  q1: String
  a1: [String]
  q2: String
  a2: [String]
  q3: String
  a3: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserInfo @aws_cognito_user_pools {
  id: ID!
  totalPoints: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelGameConnection {
  items: [Game]!
  nextToken: String
}

input ModelGameFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  levels: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelGameFilterInput]
  or: [ModelGameFilterInput]
  not: ModelGameFilterInput
}

type Query {
  getGame(id: ID!): Game
  listGames(filter: ModelGameFilterInput, limit: Int, nextToken: String): ModelGameConnection
  getGameplay(id: ID!): Gameplay
  listGameplays(filter: ModelGameplayFilterInput, limit: Int, nextToken: String): ModelGameplayConnection
  getUserInfo(id: ID!): UserInfo @aws_cognito_user_pools
  listUserInfos(filter: ModelUserInfoFilterInput, limit: Int, nextToken: String): ModelUserInfoConnection @aws_cognito_user_pools
}

input ModelGameConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  levels: ModelStringInput
  and: [ModelGameConditionInput]
  or: [ModelGameConditionInput]
  not: ModelGameConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateGameInput {
  id: ID
  name: String!
  description: String
  image: String
  levels: [String]
}

input UpdateGameInput {
  id: ID!
  name: String
  description: String
  image: String
  levels: [String]
}

input DeleteGameInput {
  id: ID!
}

type Mutation {
  createGame(input: CreateGameInput!, condition: ModelGameConditionInput): Game
  updateGame(input: UpdateGameInput!, condition: ModelGameConditionInput): Game
  deleteGame(input: DeleteGameInput!, condition: ModelGameConditionInput): Game
  createGameplay(input: CreateGameplayInput!, condition: ModelGameplayConditionInput): Gameplay
  updateGameplay(input: UpdateGameplayInput!, condition: ModelGameplayConditionInput): Gameplay
  deleteGameplay(input: DeleteGameplayInput!, condition: ModelGameplayConditionInput): Gameplay
  createUserInfo(input: CreateUserInfoInput!, condition: ModelUserInfoConditionInput): UserInfo @aws_cognito_user_pools
  updateUserInfo(input: UpdateUserInfoInput!, condition: ModelUserInfoConditionInput): UserInfo @aws_cognito_user_pools
  deleteUserInfo(input: DeleteUserInfoInput!, condition: ModelUserInfoConditionInput): UserInfo @aws_cognito_user_pools
}

input ModelSubscriptionGameFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  image: ModelSubscriptionStringInput
  levels: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionGameFilterInput]
  or: [ModelSubscriptionGameFilterInput]
}

type Subscription {
  onCreateGame(filter: ModelSubscriptionGameFilterInput): Game @aws_subscribe(mutations: ["createGame"])
  onUpdateGame(filter: ModelSubscriptionGameFilterInput): Game @aws_subscribe(mutations: ["updateGame"])
  onDeleteGame(filter: ModelSubscriptionGameFilterInput): Game @aws_subscribe(mutations: ["deleteGame"])
  onCreateGameplay(filter: ModelSubscriptionGameplayFilterInput): Gameplay @aws_subscribe(mutations: ["createGameplay"])
  onUpdateGameplay(filter: ModelSubscriptionGameplayFilterInput): Gameplay @aws_subscribe(mutations: ["updateGameplay"])
  onDeleteGameplay(filter: ModelSubscriptionGameplayFilterInput): Gameplay @aws_subscribe(mutations: ["deleteGameplay"])
  onCreateUserInfo(filter: ModelSubscriptionUserInfoFilterInput, owner: String): UserInfo @aws_subscribe(mutations: ["createUserInfo"]) @aws_cognito_user_pools
  onUpdateUserInfo(filter: ModelSubscriptionUserInfoFilterInput, owner: String): UserInfo @aws_subscribe(mutations: ["updateUserInfo"]) @aws_cognito_user_pools
  onDeleteUserInfo(filter: ModelSubscriptionUserInfoFilterInput, owner: String): UserInfo @aws_subscribe(mutations: ["deleteUserInfo"]) @aws_cognito_user_pools
}

type ModelGameplayConnection {
  items: [Gameplay]!
  nextToken: String
}

input ModelGameplayFilterInput {
  id: ModelIDInput
  gameid: ModelStringInput
  proficiency: ModelStringInput
  q1: ModelStringInput
  a1: ModelStringInput
  q2: ModelStringInput
  a2: ModelStringInput
  q3: ModelStringInput
  a3: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelGameplayFilterInput]
  or: [ModelGameplayFilterInput]
  not: ModelGameplayFilterInput
}

input ModelGameplayConditionInput {
  gameid: ModelStringInput
  proficiency: ModelStringInput
  q1: ModelStringInput
  a1: ModelStringInput
  q2: ModelStringInput
  a2: ModelStringInput
  q3: ModelStringInput
  a3: ModelStringInput
  and: [ModelGameplayConditionInput]
  or: [ModelGameplayConditionInput]
  not: ModelGameplayConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateGameplayInput {
  id: ID
  gameid: String!
  proficiency: String!
  q1: String
  a1: [String]
  q2: String
  a2: [String]
  q3: String
  a3: [String]
}

input UpdateGameplayInput {
  id: ID!
  gameid: String
  proficiency: String
  q1: String
  a1: [String]
  q2: String
  a2: [String]
  q3: String
  a3: [String]
}

input DeleteGameplayInput {
  id: ID!
}

input ModelSubscriptionGameplayFilterInput {
  id: ModelSubscriptionIDInput
  gameid: ModelSubscriptionStringInput
  proficiency: ModelSubscriptionStringInput
  q1: ModelSubscriptionStringInput
  a1: ModelSubscriptionStringInput
  q2: ModelSubscriptionStringInput
  a2: ModelSubscriptionStringInput
  q3: ModelSubscriptionStringInput
  a3: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionGameplayFilterInput]
  or: [ModelSubscriptionGameplayFilterInput]
}

type ModelUserInfoConnection @aws_cognito_user_pools {
  items: [UserInfo]!
  nextToken: String
}

input ModelUserInfoFilterInput {
  id: ModelIDInput
  totalPoints: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserInfoFilterInput]
  or: [ModelUserInfoFilterInput]
  not: ModelUserInfoFilterInput
  owner: ModelStringInput
}

input ModelUserInfoConditionInput {
  totalPoints: ModelIntInput
  and: [ModelUserInfoConditionInput]
  or: [ModelUserInfoConditionInput]
  not: ModelUserInfoConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserInfoInput {
  id: ID
  totalPoints: Int!
}

input UpdateUserInfoInput {
  id: ID!
  totalPoints: Int
}

input DeleteUserInfoInput {
  id: ID!
}

input ModelSubscriptionUserInfoFilterInput {
  id: ModelSubscriptionIDInput
  totalPoints: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserInfoFilterInput]
  or: [ModelSubscriptionUserInfoFilterInput]
  owner: ModelStringInput
}
